import community
import networkx as nx

class Cluster:
	def __init__(self):
		self.cluster_set = []
	
	def getThreshold(self, similarity_measure_list):
		total_sum = 0
		for ele in similarity_measure_list:
			total_sum+=ele[2]
		return (total_sum)/float(len(similarity_measure_list))

	def louvianClustering(self, similarity_measure_list):
		edge_list = []
		node_list = []
		thresh = self.getThreshold(similarity_measure_list)
		for element in similarity_measure_list:
			f1,f2,val = element
			if(float(val)>=thresh):
				edge_list.append((f1,f2,float(val)))
			node_list.append(f1)
			node_list.append(f2)
		node_list = list(set(node_list))
		G = nx.Graph()
		G.add_nodes_from(node_list)
		G.add_weighted_edges_from(edge_list)

		partition= community.best_partition(G)
		dendo = community.generate_dendrogram(G,None,'weight',1.,False)
		testing= community.partition_at_level(dendo, len(dendo) - 1)
		res = community.modularity(partition,G,'weight');

		list1 = [partition]
		cluster_set = set(val for dic in list1 for val in dic.values())
		cluster_set_elements = []
		for cluster_id in cluster_set:
			temp_elements = []
			for node,cluster in partition.iteritems():
				if(cluster==cluster_id):
					temp_elements.append(node)
			cluster_set_elements.append(temp_elements)
		self.cluster_set = cluster_set_elements		
		return cluster_set_elements
	
	def printCluster(self):
		for cluster_id in xrange(len(self.cluster_set)):
			print "Cluster:",cluster_id,"\n", self.cluster_set[cluster_id], "\n"
	
	def cluster(self, similarity_measure_list):
		return self.louvianClustering(similarity_measure_list)  #One clustering algo

